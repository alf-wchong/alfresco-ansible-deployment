---
# tasks file for search-services
- name: Check search is installed
  command: "{{ binaries_dir }}/solr/bin/solr.version"
  register: search_install_check
  environment:
      JAVA_HOME: "{{ java_home }}"
  failed_when: false
  changed_when: search_install_check.rc != 0
  
- include_tasks: install-OfflineDepLibs.yml
#- include_tasks: install-OfflineRPMs.yml
  when: search_install_check.rc != 0  
  
#- name: Ensure a list of packages installed or install them if not present.
#  become: true
#  become_user: root
#  yum:
#    name: "{{ item }}"
#    state: present
#    disablerepo: "\\*"
#    enablerepo: "offline-ss"
#    releasever: "{{ ansible_distribution_major_version }}"
#    disable_gpg_check: yes
#  poll: 0
#  loop: "{{ utils_search }}"

- name: Install dependant package.
  become: true
  become_user: root
  block:
    - name: Unzip
      yum:
        name: "/tmp/searchSerOfflineDep/unzip-6.0-22.el7_9.x86_64.rpm"
        state: present
        #disablerepo: "\\*"
        disablerepo: "*"
        enablerepo: "offline-ss"
        releasever: "{{ ansible_distribution_major_version }}"
        disable_gpg_check: yes
    - name: LSOF
      yum:
        name: "/tmp/searchSerOfflineDep/lsof-4.87-6.el7.x86_64.rpm"
        state: present
        #disablerepo: "\\*"
        disablerepo: "*"
        enablerepo: "offline-ss"
        releasever: "{{ ansible_distribution_major_version }}"
        disable_gpg_check: yes
        

- name: Create search binaries, config and data directories
  become: true
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rx,o=rx'
  with_items:
    - "{{ binaries_dir }}"
    - "{{ config_dir }}"
    - "{{ data_dir }}"

- name: "Check if alfresco-search-services-{{ search.version }}.zip exists"
  stat:
    path: "{{ download_location }}/alfresco-search-services-{{ search.version }}.zip"
  register: search_archive

- name: "Transfer alfresco-search-services-{{ search.version }}"
  when: not search_archive.stat.exists and search_install_check.rc != 0
  block:
    - name: "Download alfresco-search-services-{{ search.version }}.zip"
      delegate_to: localhost
      become: false
      get_url:
        url: "{{ downloads.search_zip_url }}"
        dest: "{{ role_path }}/files/alfresco-search-services-{{ search.version }}.zip"
        checksum: "sha1:{{ downloads.search_zip_sha1_checksum }}"
        url_username: "{{ nexus_user }}"
        url_password: "{{ nexus_password }}"
        timeout: 570
      register: download_result
      until: download_result is succeeded  
    - name: Extract alfresco-search-services-{{ search.version }}.zip from control into target {{ binaries_dir }}
      become: true
      unarchive:
        src: "{{ role_path }}/files/alfresco-search-services-{{ search.version }}.zip"
        dest: "{{ binaries_dir }}"
        remote_src: false
        creates: "{{ binaries_dir }}/README.MD"
        owner: "{{ username }}"
        group: "{{ group_name }}"
      when: download_result is succeeded

- name: "Move files from {{ binaries_dir }}/alfresco-search-services to {{ binaries_dir }}/"
  block:
    - name: "Check if {{ binaries_dir }}/alfresco-search-services exists"
      stat: 
        path: "{{ binaries_dir }}/alfresco-search-services"
      register: search_services_exists
    - name: "Copy files from {{ binaries_dir }}/alfresco-search-services to {{ binaries_dir }}/"
      copy:
        remote_src: true
        src: "{{ binaries_dir }}/alfresco-search-services/"
        dest: "{{ binaries_dir }}/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
      when: search_services_exists.stat.exists
    - name: Remove old files {{ binaries_dir }}/alfresco-search-services
      file: 
        path: "{{ binaries_dir }}/alfresco-search-services" 
        state: absent

- name: Add "{{ binaries_dir }}/solrhome/templates/rerank/conf/solrcore.properties"
  become: true
  template:
    src: solrcore.properties
    dest: "{{ binaries_dir }}/solrhome/templates/rerank/conf/solrcore.properties"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rwx'

- name: Add "{{ binaries_dir }}/solrhome/templates/noRerank/conf/solrcore.properties"
  become: true
  template:
    src: solrcore.properties
    dest: "{{ binaries_dir }}/solrhome/templates/noRerank/conf/solrcore.properties"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rwx'

- name: Copy files from "{{ binaries_dir }}/solrhome to {{ config_dir }}/"
  copy:
    remote_src: true
    src: "{{ binaries_dir }}/solrhome"
    dest: "{{ config_dir }}/"
    owner: "{{ username }}"
    group: "{{ group_name }}"

- name: add solr home to setenv.sh
  become: true
  become_user: "{{ username }}"
  lineinfile:
    path: "{{ config_folder }}/setenv.sh"
    insertafter: EOF
    line: "export SOLR_HOME={{ binaries_dir }}"

- name: Add "{{ binaries_dir }}/solr.sh"
  become: true
  template:
    src: solr.sh
    dest: "{{ binaries_dir }}/solr.sh"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Add "{{ config_dir }}/solr.in.sh"
  become: true
  template:
    src: solr.in.sh
    dest: "{{ config_dir }}/solr.in.sh"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx,o=rx'

- name: Check Solr running
  shell: "{{ binaries_dir }}/solr/bin/solr status"
  register: search_started
  environment:
      JAVA_HOME: "{{ java_home }}"
  failed_when: false
  changed_when: search_started.rc != 0

- name: Add alfresco-search.service
  become: true
  template:
      src: alfresco-search.service
      dest:  /etc/systemd/system/alfresco-search.service
      owner: "{{ username }}"
      group: "{{ group_name }}"
      mode: 'u=rwx,g=rwx'
  notify: restart-search
  when: search_started.failed or '"No Solr nodes are running." in search_started.stdout'

- name: Ensure Alfresco Search service is started and enabled on boot
  systemd:
    name: alfresco-search.service
    state: started
    enabled: true
