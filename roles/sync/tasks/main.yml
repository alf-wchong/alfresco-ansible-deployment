---
# tasks file for sync
- name: Include vars for postgres credentials
  include_vars: "postgres.yml"
  when: sync_db_url == ""

- name: Include OS specific variables
  include_vars: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"

#- name: Ensure a list of packages installed
#  become: true
#  become_user: root
#  package:
#    name: "{{ item }}"
#    state: present
#  poll: 0
#  loop: "{{ utils_sync }}"

- name: Download sync servies {{ sync.version }}
  when: not ansible_facts.services['alfresco-sync.service'] is defined
  delegate_to: localhost
  become: false  
  block:
    - name: Create download directory
      file:
        path: "{{ role_path }}/files"
        state: directory
    - name: Download
      get_url:
        url: "{{ downloads.sync_zip_url }}"
        dest: "{{ role_path }}/files/sync-dist-6.x-{{ sync.version }}.zip"
        url_username: "{{ nexus_user }}"
        url_password: "{{ nexus_password }}"
        checksum: "sha1:{{ downloads.sync_zip_sha1_checksum }}"
      register: sync_download_result
      until: sync_download_result is succeeded

- name: Transfer sync servies {{ sync.version }}
  when: not ansible_facts.services['alfresco-sync.service'] is defined
  become: true
  become_user: "{{ username }}"
  block:
    - name: Create sync services folder
      file:
        path: "{{ sync_home }}"
        state: directory
    - name: Extract sync service to Ansible target at {{ sync_home }}
      become: true
      become_user: "{{ username }}"
      unarchive:
        src: "{{ role_path }}/files/sync-dist-6.x-{{ sync.version }}.zip"
        dest: "{{ sync_home }}"
        remote_src: false
      when: sync_download_result is succeeded




- name: Get postgresql jar
  when: sync_db_url == ""
  block:
    - name: Create download directory on Ansible controller
      delegate_to: localhost
      become: false
      file:
        path: "{{ role_path }}/files/connectors/"
        state: directory
    - name: Download artefact to Ansible controller
      delegate_to: localhost
      become: false
      get_url:
        url: "{{ dependencies_url.postgresql_connector }}"
        dest: "{{ role_path }}/files/connectors/postgresql.jar"
      register: postgresql_download
      until: postgresql_download is succeeded
    - name: Create connectors folder
      become: true
      become_user: "{{ username }}"
      file:
        path: "{{ sync_home }}/service-sync/connectors"
        state: directory
    - name: Transfer artefact
      become: true
      become_user: "{{ username }}"
      copy:
        url: "{{ role_path }}/files/connectors/postgresql.jar"
        dest: "{{ sync_home }}/service-sync/connectors/postgresql.jar"
        mode: 'u=rwx,g=rwx,o=rx'
        owner: "{{ username }}"
        group: "{{ group_name }}"
    - name: Copy db_connector to {{ sync_home }}/service-sync/connectors folder
      when: sync_db_url != ""
    # for external databases. Read https://github.com/alf-wchong/alfresco-ansible-deployment/blob/v1.0/docs/deployment-guide.md#external-databases
      copy:
        src: "{{ inventory_dir }}/configuration_files/db_connector_sync/"
        dest: "{{ sync_home }}/service-sync/connectors/"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx,o=rx'



- name: Move sync service files to {{ sync_home }}
  block:
    - name: Check if sync folder exists
      stat:
        path: "{{ sync_home }}/sync"
      register: sync_folder
    - name: Copy files from sync to to {{ sync_home }}
      copy:
        src: "{{ sync_home }}/sync/"
        dest: "{{ sync_home }}"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        remote_src: true
      when: sync_folder.stat.exists
    - name: Remove old sync folder
      file:
        path: "{{ sync_home }}/sync"
        state: absent

- name: Add config.yml file to {{ config_folder }}
  block:
    - name: Create sync-service in {{ config_folder }}
      become: true
      become_user: "{{ username }}"
      file:
        path: "{{ config_folder }}/sync-service"
        state: directory
    - name: Add config.yml template
      template:
        src: "config.yml.j2"
        dest: "{{ config_folder }}/sync-service/config.yml"
        owner: "{{ username }}"
        group: "{{ group_name }}"
        mode: 'u=rwx,g=rwx'
        force: yes
      notify: restart-sync

- name: Check for SYNC_HOME in "{{ config_folder }}/setenv.sh"
  shell: cat {{ config_folder }}/setenv.sh | grep SYNC_HOME
  register: test_sync_home
  failed_when: false
  changed_when: test_sync_home.rc != 0

- name: Add paths to setenv file
  become: true
  become_user: "{{ username }}"
  blockinfile:
    path: "{{ config_folder }}/setenv.sh"
    marker: "# {mark} SYNC ENV VARS"
    block: |
      export SYNC_VERSION={{ sync.version }}
      export SYNC_HOME={{ sync_home }}
    insertafter: EOF
  when: test_sync_home.rc != 0

- name: Create log file with correct permissions
  become: true
  become_user: "{{ username }}"
  file:
    path: "{{ logs_folder }}/sync-service.log"
    state: touch
    mode: u=rwx,g=rw,o-rwx
  changed_when: false

- name: Add sync service startup script
  become: true
  become_user: "{{ username }}"
  template:
    src: syncservice.sh
    dest: "{{ binaries_folder }}/syncservice.sh"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx'
    force: no

- name: Add alfresco-sync.service service
  become: true
  template:
    src: alfresco-sync.service
    dest: "/etc/systemd/system/alfresco-sync.service"
    owner: "{{ username }}"
    group: "{{ group_name }}"
    mode: 'u=rwx,g=rwx'
    force: yes
  notify: restart-sync
  when: not ansible_facts.services['alfresco-sync.service'] is defined

- name: clean all
  command: yum clean all
  args:
    warn: false
  changed_when: false

- name: Remove sync service archive
  file:
    path: "{{ binaries_folder }}/sync-dist-6.x-{{ sync.version }}.zip"
    state: absent

- name: Enable Sync service
  systemd:
    name: alfresco-sync.service
    state: stopped
    enabled: true

- name: Notify sync service service to start
  wait_for:
    host: "{{ repo_host }}"
    port: 8080
  notify: start-sync
